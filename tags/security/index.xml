<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security on Shared thoughts</title>
    <link>https://erdii.github.io/tags/security/</link>
    <description>Recent content in Security on Shared thoughts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 16 Feb 2016 09:49:40 +0000</lastBuildDate>
    
	<atom:link href="https://erdii.github.io/tags/security/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TIL why potentially destructive actions on a user-facing API should NOT use HTTP GET</title>
      <link>https://erdii.github.io/2016/02/16/til-why-potentially-destructive-actions-on-a-user-facing-api-should-not-use-http-get/</link>
      <pubDate>Tue, 16 Feb 2016 09:49:40 +0000</pubDate>
      
      <guid>https://erdii.github.io/2016/02/16/til-why-potentially-destructive-actions-on-a-user-facing-api-should-not-use-http-get/</guid>
      <description>Imagine a commentbox, where each comment has to be approved by the moderator in his backend.
If the backend used GET requests for the comment moderation, the url to moderate a post should look something like this: http://yourdomain.com/moderate/:decision/:postid
For example:
 http://yourdomain.com/moderate/allow/1 http://yourdomain.com/moderate/deny/2 &amp;hellip;  If some evil person posted a comment and knew their postid (lets say 12) they could try to email you a link to http://yourdomain.com/moderate/allow/12 with a caption that says Cute cat gifs, you would click on it and BOOM the comment would be published&amp;hellip;</description>
    </item>
    
    <item>
      <title>TIL when to sanitize user input in a web application</title>
      <link>https://erdii.github.io/2016/02/15/til-how-to-sanitize-user-input-in-a-web-application/</link>
      <pubDate>Mon, 15 Feb 2016 15:29:30 +0000</pubDate>
      
      <guid>https://erdii.github.io/2016/02/15/til-how-to-sanitize-user-input-in-a-web-application/</guid>
      <description>When a webapp takes user input (like a blog post or comment) and later renders that input into a HTML-Page, the webapp has to ensure that no malicious &amp;lt;script&amp;gt; tags or anything else is delivered to the viewer.
How to do that is actually pretty easy&amp;hellip; Just replace &amp;quot; &#39; &amp;lt; and &amp;gt; with their HTML-Entity-Counterparts. But when do we have to do it??
Because we want the input&amp;rsquo;s author to see the exact same thing she entered into the text field, the webapp should not sanitize the text before it gets saved into the database, but rather before it gets delivered to the viewing client.</description>
    </item>
    
  </channel>
</rss>