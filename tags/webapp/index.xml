<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>webapp on Shared thoughts</title><link>https://erdii.engineering/tags/webapp/</link><description>Recent content in webapp on Shared thoughts</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 18 Feb 2016 15:47:57 +0000</lastBuildDate><atom:link href="https://erdii.engineering/tags/webapp/index.xml" rel="self" type="application/rss+xml"/><item><title>TIL that you need to remove your stopped Docker containers from time to time (and how to do it)</title><link>https://erdii.engineering/2016/02/18/til-that-you-need-to-remove-your-stopped-docker-containers-from-time-to-time-and-how-to-do-it/</link><pubDate>Thu, 18 Feb 2016 15:47:57 +0000</pubDate><guid>https://erdii.engineering/2016/02/18/til-that-you-need-to-remove-your-stopped-docker-containers-from-time-to-time-and-how-to-do-it/</guid><description>If you ever developed with Docker, you have to acknowledge that it is great!
Ok&amp;hellip; you have to wrap your brain around an additional layer with all those caveats we know and love (volumes, path in- and outside of containers, &amp;hellip;), but it lets you bundle all your dependencies at build time and then ship an image that will run in every docker-compatible runtime!
When you develop with Docker and do a lot of start/stop/build actions you will inevitably clutter your Docker Host with many unused containers.</description></item><item><title>TIL why User emails should always be lowercased before using them as a login qualifier</title><link>https://erdii.engineering/2016/02/17/til-why-user-emails-should-always-be-lowercased-before-using-them-as-a-login-2/</link><pubDate>Wed, 17 Feb 2016 13:23:05 +0000</pubDate><guid>https://erdii.engineering/2016/02/17/til-why-user-emails-should-always-be-lowercased-before-using-them-as-a-login-2/</guid><description>In one project at work we implemented a passwordless login where you enter your email and then prove that you own this email-account by clicking on the link we sent you.
When I tried to log in with my (mistakenly uppercased) email-adress Erdii@werise.de I got an email, but this was not my account&amp;hellip; It was empty.
Then it struck me. I used the entered email as a case-sensitive identifier to the account and obviously &amp;quot;Erdii@werise.</description></item><item><title>TIL why potentially destructive actions on a user-facing API should NOT use HTTP GET</title><link>https://erdii.engineering/2016/02/16/til-why-potentially-destructive-actions-on-a-user-facing-api-should-not-use-http-get/</link><pubDate>Tue, 16 Feb 2016 09:49:40 +0000</pubDate><guid>https://erdii.engineering/2016/02/16/til-why-potentially-destructive-actions-on-a-user-facing-api-should-not-use-http-get/</guid><description>Imagine a commentbox, where each comment has to be approved by the moderator in his backend.
If the backend used GET requests for the comment moderation, the url to moderate a post should look something like this: http://yourdomain.com/moderate/:decision/:postid
For example:
http://yourdomain.com/moderate/allow/1 http://yourdomain.com/moderate/deny/2 &amp;hellip; If some evil person posted a comment and knew their postid (lets say 12) they could try to email you a link to http://yourdomain.com/moderate/allow/12 with a caption that says Cute cat gifs, you would click on it and BOOM the comment would be published&amp;hellip;</description></item><item><title>TIL when to sanitize user input in a web application</title><link>https://erdii.engineering/2016/02/15/til-how-to-sanitize-user-input-in-a-web-application/</link><pubDate>Mon, 15 Feb 2016 15:29:30 +0000</pubDate><guid>https://erdii.engineering/2016/02/15/til-how-to-sanitize-user-input-in-a-web-application/</guid><description>When a webapp takes user input (like a blog post or comment) and later renders that input into a HTML-Page, the webapp has to ensure that no malicious &amp;lt;script&amp;gt; tags or anything else is delivered to the viewer.
How to do that is actually pretty easy&amp;hellip; Just replace &amp;quot; ' &amp;lt; and &amp;gt; with their HTML-Entity-Counterparts. But when do we have to do it??
Because we want the input&amp;rsquo;s author to see the exact same thing she entered into the text field, the webapp should not sanitize the text before it gets saved into the database, but rather before it gets delivered to the viewing client.</description></item></channel></rss>